{"id":969254221,"lang":"cpp","lang_name":"C++","time":"1Â week","timestamp":1686536893,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/969254221/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"18.8 MB","code":"class Solution {\n    // Helper function which returns the number of hours required to consume the piles for given K\n    int hoursRequired(const vector<int> &piles, int k)\n    {\n        int h = 0;\n        if(k == 0) return INT_MAX;\n        for(int i : piles)\n        {\n            if(i % k != 0)\n            {\n                h++;\n            }\n            h += (i / k);\n        }\n        return h;\n    }\n    \npublic:\n    int minEatingSpeed(vector<int>& piles, int H) {\n        long long sum = 0;\n        int mx = 0;\n        for(int i = 0; i < piles.size(); i++)\n        {\n            sum += piles[i];\n            mx = max(mx, piles[i]);\n        }\n        int l = sum / H, r = mx, ans;\n        while(l < r)\n        {\n            int mid = l + (r - l) / 2;\n            int ans = hoursRequired(piles, mid);\n\t\t\t// If hours required is greater than our limit, ignore mid\n            if(ans > H)\n            {\n                l = mid + 1;\n            }\n            else\n            {\n                r = mid;\n            }\n        }\n        return r;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false}