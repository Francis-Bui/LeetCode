{"id":952117659,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1684334068,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/952117659/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"20.6 MB","code":"class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        slow, fast = head, head\n        while fast != None and fast.next != None:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                tmp1 = head\n                tmp2 = slow\n                while tmp1 != tmp2:\n                    tmp1 = tmp1.next\n                    tmp2 = tmp2.next\n                return tmp1\n        return None","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false}