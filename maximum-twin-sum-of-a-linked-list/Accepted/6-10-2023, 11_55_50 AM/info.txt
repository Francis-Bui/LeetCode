{"id":968189103,"lang":"cpp","lang_name":"C++","time":"1 week, 2 days","timestamp":1686412550,"status":10,"status_display":"Accepted","runtime":"251 ms","url":"/submissions/detail/968189103/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"116.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n  int pairSum(ListNode* head) {\n\t\tListNode* slow = head;\n\t\tListNode* fast = head;\n\t\tint maxVal = 0;\n\n\t\t// Get middle of linked list\n\t\twhile(fast && fast -> next)\n\t\t{\n\t\t\tfast = fast -> next -> next;\n\t\t\tslow = slow -> next;\n\t\t}\n\n\t\t// Reverse second part of linked list\n\t\tListNode *nextNode, *prev = NULL;\n\t\twhile (slow) {\n\t\t\tnextNode = slow->next;\n\t\t\tslow->next = prev;\n\t\t\tprev = slow;\n\t\t\tslow = nextNode;\n\t\t}\n\n\t\t// Get max sum of pairs\n\t\twhile(prev)\n\t\t{\n\t\t\tmaxVal = max(maxVal, head -> val + prev -> val);\n\t\t\tprev = prev -> next;\n\t\t\thead = head -> next;\n\t\t}\n\n\t\treturn maxVal;\n\t}\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false}