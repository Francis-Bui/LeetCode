{"id":952116684,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1684333959,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/952116684/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"16.3 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        # Initialize store node and pointer\n        mergedList = ListNode(0)\n        ptr = mergedList\n\n        # Compare the head of the two lists\n        while list1 and list2:\n            if list1.val < list2.val:\n                # Append the smaller value to the new list\n                ptr.next = list1\n                # Advance the pointer\n                ptr = list1\n                # Advance the head pointer of the first list\n                list1 = list1.next\n            else:\n                # Append the smaller value to the new list\n                ptr.next = list2\n                # Advance the pointer\n                ptr = list2\n                # Advance the head pointer of the second list\n                list2 = list2.next\n\n        # Append the remaining nodes of the non-empty list to the new list\n        if list1:\n            ptr.next = list1\n        else:\n            ptr.next = list2\n        # Return the head of the merged list\n        return mergedList.next","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-sorted-lists","has_notes":false}