{"id":950841803,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1684162641,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/950841803/","is_pending":"Not Pending","title":"Middle of the Linked List","memory":"16.2 MB","code":"# Time Complexity :  O(n)\n# Space Complexity : O(1)\nclass Solution(object):\n    def middleNode(self, head):\n        # We need two pointers, one is head with one step each iteration, and the other is tmp with two steps each iteration.\n        temp = head\n        while temp and temp.next:\n            # In each iteration, we move head one node forward and we move temp two nodes forward...\n            head = head.next\n            temp = temp.next.next\n        # When temp reaches the last node, head will be exactly at the middle point...\n        return head","compare_result":"111111111111111111111111111111111111","title_slug":"middle-of-the-linked-list","has_notes":false}